/*
  greenup.js
  –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ GreenUP v2.0
  –ê–≤—Ç–æ—Ä: AI Assistant
*/

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞
"use strict";

const GreenUP = {
    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏
    init() {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        document.addEventListener('DOMContentLoaded', () => {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
            this.utils.log('GreenUP JS v2.0 Initializing...');
            this.modal.init();
            this.notifications.init();
            this.scroll.init();
            this.animations.init();
            this.forms.init();
            this.languageSwitcher.init();
            this.utils.log('GreenUP JS is ready! üöÄ');
        });
    },

    // --- –£–¢–ò–õ–ò–¢–´ ---
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    utils: {
        // –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
        log(message) {
            console.log(`%c[GreenUP]%c ${message}`, 'color: #2E7D32; font-weight: bold;', 'color: #333;');
        },
        // –§—É–Ω–∫—Ü–∏—è "debounce" –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä–æ–ª–ª–∞ –∏–ª–∏ —Ä–µ—Å–∞–π–∑–∞)
        debounce(func, delay = 250) {
            let timeout;
            return (...args) => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    func.apply(this, args);
                }, delay);
            };
        }
    },

    // --- –ú–û–î–£–õ–¨ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê ---
    // –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –Ω–∞ —Å–∞–π—Ç–µ
    modal: {
        modalElement: null,
        confirmCallback: null,

        init() {
            this.createModalHTML();
            this.modalElement = document.getElementById('confirmationModal');
            if (!this.modalElement) return;

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.modalElement.addEventListener('click', (e) => {
                // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
                if (e.target.matches('.modal-overlay') || e.target.closest('.modal-cancel-btn')) {
                    this.close();
                }
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "Confirm"
                if (e.target.closest('.modal-confirm-btn')) {
                    if (this.confirmCallback) {
                        this.confirmCallback();
                    }
                    this.close();
                }
            });

            // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-modal-trigger
            document.body.addEventListener('click', (e) => {
                const trigger = e.target.closest('[data-modal-trigger]');
                if (trigger) {
                    e.preventDefault();
                    const { title, message, confirmText, confirmClass } = trigger.dataset;
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
                    const formId = trigger.dataset.form;
                    const formToSubmit = formId ? document.getElementById(formId) : null;
                    
                    const callback = () => {
                        if (formToSubmit) {
                            formToSubmit.submit();
                        } else {
                            GreenUP.utils.log('No form to submit.');
                        }
                    };

                    this.open({ title, message, confirmText, confirmClass, onConfirm: callback });
                }
            });
        },

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        createModalHTML() {
            if (document.getElementById('confirmationModal')) return;
            const modalHTML = `
                <div id="confirmationModal" class="modal-overlay">
                    <div class="modal-content">
                        <h4 class="modal-title">–í—ã —É–≤–µ—Ä–µ–Ω—ã?</h4>
                        <p class="modal-message">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
                        <div class="modal-buttons">
                            <button class="btn modal-confirm-btn delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
                            <button class="btn secondary-btn modal-cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        },

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        open({ title, message, confirmText, confirmClass, onConfirm }) {
            const titleEl = this.modalElement.querySelector('.modal-title');
            const messageEl = this.modalElement.querySelector('.modal-message');
            const confirmBtn = this.modalElement.querySelector('.modal-confirm-btn');

            titleEl.textContent = title || '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ';
            messageEl.textContent = message || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä.';
            confirmBtn.textContent = confirmText || '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å';
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmBtn.className = 'btn modal-confirm-btn'; // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤
            confirmBtn.classList.add(confirmClass || 'delete-btn');

            this.confirmCallback = onConfirm;
            this.modalElement.classList.add('visible');
        },

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        close() {
            this.modalElement.classList.remove('visible');
            this.confirmCallback = null;
        }
    },

    // --- –ú–û–î–£–õ–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ---
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    notifications: {
        container: null,

        init() {
            this.createContainer();
        },

        createContainer() {
            this.container = document.createElement('div');
            this.container.className = 'notification-container';
            document.body.appendChild(this.container);
        },

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        show(message, type = 'success', duration = 4000) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;

            this.container.appendChild(notification);
            
            // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
            setTimeout(() => notification.classList.add('visible'), 10);
            
            // –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            setTimeout(() => {
                notification.classList.remove('visible');
                notification.addEventListener('transitionend', () => notification.remove());
            }, duration);
        }
    },

    // --- –ú–û–î–£–õ–¨ –°–ö–†–û–õ–õ–ê ---
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–≤–µ—Ä—Ö"
    scroll: {
        backToTopButton: null,

        init() {
            this.createBackToTopButton();
            this.backToTopButton = document.getElementById('back-to-top');
            if (!this.backToTopButton) return;

            // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    document.querySelector(this.getAttribute('href')).scrollIntoView({
                        behavior: 'smooth'
                    });
                });
            });

            // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–≤–µ—Ä—Ö"
            window.addEventListener('scroll', GreenUP.utils.debounce(() => {
                if (window.scrollY > 300) {
                    this.backToTopButton.style.display = 'flex';
                } else {
                    this.backToTopButton.style.display = 'none';
                }
            }, 150));
        },
        
        createBackToTopButton() {
            if (document.getElementById('back-to-top')) return;
            const buttonHTML = `<button id="back-to-top" class="btn" title="–ù–∞–≤–µ—Ä—Ö" style="display: none;">&#8679;</button>`;
            document.body.insertAdjacentHTML('beforeend', buttonHTML);
        }
    },
    
    // --- –ú–û–î–£–õ–¨ –ê–ù–ò–ú–ê–¶–ò–ô ---
    // –ê–Ω–∏–º–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    animations: {
        init() {
            const animatedElements = document.querySelectorAll('.fade-in-on-scroll');
            if (animatedElements.length === 0) return;

            const observer = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                        observer.unobserve(entry.target); // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                    }
                });
            }, { threshold: 0.1 }); // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ 10% —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–¥–Ω–æ

            animatedElements.forEach(el => observer.observe(el));
        }
    },

    // --- –ú–û–î–£–õ–¨ –í–ê–õ–ò–î–ê–¶–ò–ò –§–û–†–ú ---
    forms: {
        init() {
            document.querySelectorAll('form.validate-form').forEach(form => {
                form.addEventListener('submit', (e) => {
                    if (!this.validate(form)) {
                        e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
                        GreenUP.notifications.show('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.', 'error');
                    }
                });
            });
        },
        
        validate(form) {
            let isValid = true;
            this.clearErrors(form);

            const requiredFields = form.querySelectorAll('[required]');
            requiredFields.forEach(field => {
                if (field.value.trim() === '') {
                    this.showError(field, '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.');
                    isValid = false;
                }
            });

            const emailFields = form.querySelectorAll('input[type="email"]');
            emailFields.forEach(field => {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (field.value.trim() !== '' && !emailRegex.test(field.value)) {
                    this.showError(field, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.');
                    isValid = false;
                }
            });

            return isValid;
        },

        showError(field, message) {
            field.classList.add('input-error');
            const error = document.createElement('div');
            error.className = 'form-error-message';
            error.textContent = message;
            field.parentNode.insertBefore(error, field.nextSibling);
        },

        clearErrors(form) {
            form.querySelectorAll('.input-error').forEach(field => field.classList.remove('input-error'));
            form.querySelectorAll('.form-error-message').forEach(error => error.remove());
        }
    },

    // --- –ú–û–î–£–õ–¨ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –Ø–ó–´–ö–ê ---
    languageSwitcher: {
        init() {
            const switcher = document.querySelector('.lang-switcher');
            if (!switcher) return;

            switcher.addEventListener('click', (e) => {
                e.preventDefault();
                const lang = e.target.dataset.lang;
                if (lang) {
                    this.changeLanguage(lang);
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
                    switcher.querySelectorAll('a').forEach(a => a.classList.remove('active'));
                    e.target.classList.add('active');
                }
            });
        },

        changeLanguage(lang) {
            document.querySelectorAll('[data-lang-key]').forEach(el => {
                const key = el.dataset.langKey;
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ç–µ–∫—Å—Ç—ã –±—ã –ø–æ–¥–≥—Ä—É–∂–∞–ª–∏—Å—å –∏–∑ JSON —Ñ–∞–π–ª–∞
                const translations = {
                    'nav_home': { 'ru': '–ì–ª–∞–≤–Ω–∞—è', 'en': 'Home' },
                    'nav_tasks': { 'ru': '–ó–∞–¥–∞—á–∏', 'en': 'Tasks' },
                    'nav_friends': { 'ru': '–î—Ä—É–∑—å—è', 'en': 'Friends' },
                    'page_title': { 'ru': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GreenUP!', 'en': 'Welcome to GreenUP!' }
                };
                if (translations[key] && translations[key][lang]) {
                    el.textContent = translations[key][lang];
                }
            });
            document.documentElement.lang = lang; // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç lang —É html
            GreenUP.utils.log(`Language changed to ${lang.toUpperCase()}`);
        }
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å –Ω–∞—à —Å–∫—Ä–∏–ø—Ç
GreenUP.init();